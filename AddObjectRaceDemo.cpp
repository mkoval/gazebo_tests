#include <gazebo/gazebo.hh>
#include <gazebo/physics/physics.hh>
#include <boost/format.hpp>
#include <boost/make_shared.hpp>

using namespace gazebo;
int main() {
    gazebo::setupServer();
    static std::string const empty_world_xml = "<?xml version=\"1.0\"?><sdf version=\"1.4\"><world name=\"autogenerated\"></world></sdf>";
    static std::string const model_type = "model://youbot";
    static int const num_models = 100;

    physics::WorldPtr world;
    sdf::SDFPtr sdf(new sdf::SDF);
    if (!sdf::init(sdf)) {
        throw std::runtime_error("Failed initializing SDF.");
    }
    if (!sdf::readString(empty_world_xml, sdf)) {
        throw std::runtime_error("Failed loading empty world XML.");
    }

    world = gazebo::physics::create_world();
    if (!world) {
        throw std::runtime_error("Creating world failed.");
    }

    gazebo::physics::load_world(world, sdf->root->GetElement("world"));
    gazebo::physics::init_world(world);
    gazebo::runWorld(world, 1);

    for (int i = 0; i < num_models; ++i){
        // Resolve a model:// URI to a local path.
        if (model_path.empty()) {
            throw std::runtime_error(boost::str(
                boost::format("Unable to find model of type '%s'.") % model_type));
        }

        // Load the model into SDF so we can change its name before adding it
        // to the environment.
        sdf::SDFPtr model_sdf = boost::make_shared<sdf::SDF>();
        if (!sdf::init(model_sdf)) {
            throw std::runtime_error("Failed initalizing SDF.");
        }

        if (!sdf::readFile(model_path, model_sdf)) {
            throw std::runtime_error(boost::str(
                boost::format("Failed reading model file '%s' of type '%s'.")
                    % model_path % model_type));
        }

        // Assign the model a unique name.
        std::string const name = boost::str(boost::format("model%d") % i);
        sdf::ElementPtr const model = model_sdf->root->GetElement("model");
        model->GetAttribute("name")->SetFromString(name);
        world->InsertModelSDF(*model_sdf);

        gazebo::runWorld(world, 1);

        // Verify that the model was added.
        if (world->GetModel(name)) {
            std::cout << (boost::format("SUCCESS creating model '%s'.") % name) << std::endl;
        } else {
            std::cout << (boost::format("FAILED  creating model '%s'.") % name) << std::endl;
        }
    }
    return 0;
}
